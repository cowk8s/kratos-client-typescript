/* tslint:disable */
/* eslint-disable */
/**
 * Ory Kratos
 * Welcome to the ORY Kratos HTTP API documentation!
 *
 * The version of the OpenAPI document: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * HTMLForm represents a HTML Form. The container can work with both HTTP Form and JSON requests
 * @export
 * @interface Form
 */
export interface Form {
    /**
     * Action should be used as the form action URL (<form action=\"{{ .Action }}\" method=\"post\">).
     * @type {string}
     * @memberof Form
     */
    'action'?: string;
    /**
     * Errors contains all form errors. These will be duplicates of the individual field errors.
     * @type {Array<Error>}
     * @memberof Form
     */
    'errors'?: Array<Error>;
    /**
     * Fields contains multiple fields asdfasdf
     * @type {{ [key: string]: FormField; }}
     * @memberof Form
     */
    'fields'?: { [key: string]: FormField; };
    /**
     * Method is the form method (e.g. POST)
     * @type {string}
     * @memberof Form
     */
    'method'?: string;
}
/**
 * Field represents a HTML Form Field
 * @export
 * @interface FormField
 */
export interface FormField {
    /**
     * Errors contains all validation errors this particular field has caused.
     * @type {Array<Error>}
     * @memberof FormField
     */
    'errors'?: Array<Error>;
    /**
     * Name is the equivalent of <input name=\"{{.Name}}\">
     * @type {string}
     * @memberof FormField
     */
    'name'?: string;
    /**
     * Name is the equivalent of <input required=\"{{.Required}}\">
     * @type {boolean}
     * @memberof FormField
     */
    'required'?: boolean;
    /**
     * Name is the equivalent of <input type=\"{{.Type}}\">
     * @type {string}
     * @memberof FormField
     */
    'type'?: string;
    /**
     * Name is the equivalent of <input value=\"{{.Value}}\">
     * @type {object}
     * @memberof FormField
     */
    'value'?: object;
}
/**
 * Error responses are sent when an error (e.g. unauthorized, bad request, ...) occurred.
 * @export
 * @interface GenericError
 */
export interface GenericError {
    /**
     * Name is the error name.
     * @type {string}
     * @memberof GenericError
     */
    'error': string;
    /**
     * Code represents the error status code (404, 403, 401, ...).
     * @type {number}
     * @memberof GenericError
     */
    'error_code'?: number;
    /**
     * Debug contains debug information. This is usually not available and has to be enabled.
     * @type {string}
     * @memberof GenericError
     */
    'error_debug'?: string;
    /**
     * Hint contains further information on the nature of the error.
     * @type {string}
     * @memberof GenericError
     */
    'error_hint'?: string;
}
/**
 * 
 * @export
 * @interface HealthNotReadyStatus
 */
export interface HealthNotReadyStatus {
    /**
     * Errors contains a list of errors that caused the not ready status.
     * @type {{ [key: string]: string; }}
     * @memberof HealthNotReadyStatus
     */
    'errors'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface HealthStatus
 */
export interface HealthStatus {
    /**
     * Status always contains \"ok\".
     * @type {string}
     * @memberof HealthStatus
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface Identity
 */
export interface Identity {
    /**
     * 
     * @type {string}
     * @memberof Identity
     */
    'id': string;
    /**
     * 
     * @type {object}
     * @memberof Identity
     */
    'traits': object;
    /**
     * TraitsSchemaURL is the JSON Schema to be used for validating the identity\'s traits.  format: uri
     * @type {string}
     * @memberof Identity
     */
    'traits_schema_url'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * and so on.
     * @type {string}
     * @memberof LoginRequest
     */
    'active'?: string;
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to log in, a new request has to be initiated.
     * @type {string}
     * @memberof LoginRequest
     */
    'expires_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'id'?: string;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     * @type {string}
     * @memberof LoginRequest
     */
    'issued_at'?: string;
    /**
     * Methods contains context for all enabled login methods. If a login request has been processed, but for example the password is incorrect, this will contain error messages.
     * @type {{ [key: string]: LoginRequestMethod; }}
     * @memberof LoginRequest
     */
    'methods'?: { [key: string]: LoginRequestMethod; };
    /**
     * RequestURL is the initial URL that was requested from ORY Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof LoginRequest
     */
    'request_url'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequestMethod
 */
export interface LoginRequestMethod {
    /**
     * 
     * @type {LoginRequestMethodConfig}
     * @memberof LoginRequestMethod
     */
    'config'?: LoginRequestMethodConfig;
    /**
     * and so on.
     * @type {string}
     * @memberof LoginRequestMethod
     */
    'method'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequestMethodConfig
 */
export interface LoginRequestMethodConfig {
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Code    FormErrorCode `json:\"id,omitempty\"`
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface OidcStrategyCredentialsConfig
 */
export interface OidcStrategyCredentialsConfig {
    /**
     * 
     * @type {string}
     * @memberof OidcStrategyCredentialsConfig
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcStrategyCredentialsConfig
     */
    'subject'?: string;
}
/**
 * 
 * @export
 * @interface OidcStrategyRequestMethod
 */
export interface OidcStrategyRequestMethod {
    /**
     * Action should be used as the form action URL (<form action=\"{{ .Action }}\" method=\"post\">).
     * @type {string}
     * @memberof OidcStrategyRequestMethod
     */
    'action'?: string;
    /**
     * Errors contains all form errors. These will be duplicates of the individual field errors.
     * @type {Array<Error>}
     * @memberof OidcStrategyRequestMethod
     */
    'errors'?: Array<Error>;
    /**
     * Fields contains multiple fields asdfasdf
     * @type {{ [key: string]: FormField; }}
     * @memberof OidcStrategyRequestMethod
     */
    'fields'?: { [key: string]: FormField; };
    /**
     * Method is the form method (e.g. POST)
     * @type {string}
     * @memberof OidcStrategyRequestMethod
     */
    'method'?: string;
    /**
     * 
     * @type {Array<FormField>}
     * @memberof OidcStrategyRequestMethod
     */
    'providers'?: Array<FormField>;
}
/**
 * This request is used when an identity wants to update profile information (especially traits) in a selfservice manner.  For more information head over to: https://www.ory.sh/docs/kratos/selfservice/profile
 * @export
 * @interface ProfileManagementRequest
 */
export interface ProfileManagementRequest {
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to update the profile, a new request has to be initiated.
     * @type {string}
     * @memberof ProfileManagementRequest
     */
    'expires_at'?: string;
    /**
     * 
     * @type {Form}
     * @memberof ProfileManagementRequest
     */
    'form'?: Form;
    /**
     * 
     * @type {string}
     * @memberof ProfileManagementRequest
     */
    'id'?: string;
    /**
     * 
     * @type {Identity}
     * @memberof ProfileManagementRequest
     */
    'identity'?: Identity;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     * @type {string}
     * @memberof ProfileManagementRequest
     */
    'issued_at'?: string;
    /**
     * RequestURL is the initial URL that was requested from ORY Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof ProfileManagementRequest
     */
    'request_url'?: string;
    /**
     * UpdateSuccessful, if true, indicates that the profile has been updated successfully with the provided data. Done will stay true when repeatedly checking. If set to true, done will revert back to false only when a request with invalid (e.g. \"please use a valid phone number\") data was sent.
     * @type {boolean}
     * @memberof ProfileManagementRequest
     */
    'update_successful'?: boolean;
}
/**
 * 
 * @export
 * @interface RegistrationRequest
 */
export interface RegistrationRequest {
    /**
     * and so on.
     * @type {string}
     * @memberof RegistrationRequest
     */
    'active'?: string;
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to log in, a new request has to be initiated.
     * @type {string}
     * @memberof RegistrationRequest
     */
    'expires_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    'id'?: string;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     * @type {string}
     * @memberof RegistrationRequest
     */
    'issued_at'?: string;
    /**
     * Methods contains context for all enabled registration methods. If a registration request has been processed, but for example the password is incorrect, this will contain error messages.
     * @type {{ [key: string]: RegistrationRequestMethod; }}
     * @memberof RegistrationRequest
     */
    'methods'?: { [key: string]: RegistrationRequestMethod; };
    /**
     * RequestURL is the initial URL that was requested from ORY Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof RegistrationRequest
     */
    'request_url'?: string;
}
/**
 * 
 * @export
 * @interface RegistrationRequestMethod
 */
export interface RegistrationRequestMethod {
    /**
     * 
     * @type {RegistrationRequestMethodConfig}
     * @memberof RegistrationRequestMethod
     */
    'config'?: RegistrationRequestMethodConfig;
    /**
     * and so on.
     * @type {string}
     * @memberof RegistrationRequestMethod
     */
    'method'?: string;
}
/**
 * 
 * @export
 * @interface RegistrationRequestMethodConfig
 */
export interface RegistrationRequestMethodConfig {
}
/**
 * 
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * Version is the service\'s version.
     * @type {string}
     * @memberof Version
     */
    'version'?: string;
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns a 200 status code when the HTTP server is up running. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check alive status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isInstanceAlive: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/alive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check readiness status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isInstanceReady: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/ready`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns a 200 status code when the HTTP server is up running. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check alive status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isInstanceAlive(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isInstanceAlive(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.isInstanceAlive']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check readiness status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isInstanceReady(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isInstanceReady(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.isInstanceReady']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * This endpoint returns a 200 status code when the HTTP server is up running. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check alive status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isInstanceAlive(options?: RawAxiosRequestConfig): AxiosPromise<HealthStatus> {
            return localVarFp.isInstanceAlive(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check readiness status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isInstanceReady(options?: RawAxiosRequestConfig): AxiosPromise<HealthStatus> {
            return localVarFp.isInstanceReady(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * This endpoint returns a 200 status code when the HTTP server is up running. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check alive status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public isInstanceAlive(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).isInstanceAlive(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check readiness status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public isInstanceReady(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).isInstanceReady(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns a login request\'s context with, for example, error details and other information.  For an in-depth look at ORY Krato\'s profile management flow, head over to: https://www.ory.sh/docs/kratos/selfservice/profile
         * @summary Complete Profile Management Flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeProfileManagementFlow: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a login request\'s context with, for example, error details and other information.  For an in-depth look at ORY Krato\'s login flow, head over to: https://www.ory.sh/docs/kratos/selfservice/login
         * @summary Get Login Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginRequest: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/browser/requests/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a profile management request\'s context with, for example, error details and other information.  It can be used from a Single Page Application or other applications running on a client device. The request must be made with valid authentication cookies or it will fail!  If you wish to access this endpoint without the valid cookies (e.g. as part of a server) please call this path at the admin port.  For an in-depth look at ORY Krato\'s profile management flow, head over to: https://www.ory.sh/docs/kratos/selfservice/profile
         * @summary Get Profile Management Request (via cookie)
         * @param {string} request Request should be set to the value of the &#x60;request&#x60; query parameter by the profile management UI.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileManagementRequest: async (request: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('getProfileManagementRequest', 'request', request)
            const localVarPath = `/profiles/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (request !== undefined) {
                localVarQueryParameter['request'] = request;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a registration request\'s context with, for example, error details and other information.  For an in-depth look at ORY Krato\'s registration flow, head over to: https://www.ory.sh/docs/kratos/selfservice/registration
         * @summary Get Registration Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistrationRequest: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/browser/requests/registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initializes a login flow. This endpoint **should not be called from a programatic API** but instead for the, for example, browser. It will redirect the user agent (e.g. browser) to the configured login UI, appending the login challenge.  If the user-agent already has a valid authentication session, the server will respond with a 302 code redirecting to the config value of `urls.default_return_to`.  For an in-depth look at ORY Krato\'s login flow, head over to: https://www.ory.sh/docs/kratos/selfservice/login
         * @summary Initialize a Login Flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeLoginFlow: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/browser/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initializes a profile update flow. This endpoint **should not be called from a programatic API** but instead for the, for example, browser. It will redirect the user agent (e.g. browser) to the configured login UI, appending the login challenge.  If the user-agent does not have a valid authentication session, a 302 code will be returned which redirects to the initializeLoginFlow endpoint, appending this page as the return_to value.  For an in-depth look at ORY Krato\'s profile management flow, head over to: https://www.ory.sh/docs/kratos/selfservice/profile
         * @summary Initialize Profile Management Flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeProfileManagementFlow: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initializes a registration flow. This endpoint **should not be called from a programatic API** but instead for the, for example, browser. It will redirect the user agent (e.g. browser) to the configured registration UI, appending the registration challenge.  For an in-depth look at ORY Krato\'s registration flow, head over to: https://www.ory.sh/docs/kratos/selfservice/registration
         * @summary Initialize a Registration Flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeRegistrationFlow: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/browser/registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns a login request\'s context with, for example, error details and other information.  For an in-depth look at ORY Krato\'s profile management flow, head over to: https://www.ory.sh/docs/kratos/selfservice/profile
         * @summary Complete Profile Management Flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeProfileManagementFlow(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeProfileManagementFlow(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicApi.completeProfileManagementFlow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns a login request\'s context with, for example, error details and other information.  For an in-depth look at ORY Krato\'s login flow, head over to: https://www.ory.sh/docs/kratos/selfservice/login
         * @summary Get Login Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoginRequest(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoginRequest(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicApi.getLoginRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns a profile management request\'s context with, for example, error details and other information.  It can be used from a Single Page Application or other applications running on a client device. The request must be made with valid authentication cookies or it will fail!  If you wish to access this endpoint without the valid cookies (e.g. as part of a server) please call this path at the admin port.  For an in-depth look at ORY Krato\'s profile management flow, head over to: https://www.ory.sh/docs/kratos/selfservice/profile
         * @summary Get Profile Management Request (via cookie)
         * @param {string} request Request should be set to the value of the &#x60;request&#x60; query parameter by the profile management UI.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileManagementRequest(request: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileManagementRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfileManagementRequest(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicApi.getProfileManagementRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns a registration request\'s context with, for example, error details and other information.  For an in-depth look at ORY Krato\'s registration flow, head over to: https://www.ory.sh/docs/kratos/selfservice/registration
         * @summary Get Registration Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegistrationRequest(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegistrationRequest(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicApi.getRegistrationRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint initializes a login flow. This endpoint **should not be called from a programatic API** but instead for the, for example, browser. It will redirect the user agent (e.g. browser) to the configured login UI, appending the login challenge.  If the user-agent already has a valid authentication session, the server will respond with a 302 code redirecting to the config value of `urls.default_return_to`.  For an in-depth look at ORY Krato\'s login flow, head over to: https://www.ory.sh/docs/kratos/selfservice/login
         * @summary Initialize a Login Flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initializeLoginFlow(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initializeLoginFlow(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicApi.initializeLoginFlow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint initializes a profile update flow. This endpoint **should not be called from a programatic API** but instead for the, for example, browser. It will redirect the user agent (e.g. browser) to the configured login UI, appending the login challenge.  If the user-agent does not have a valid authentication session, a 302 code will be returned which redirects to the initializeLoginFlow endpoint, appending this page as the return_to value.  For an in-depth look at ORY Krato\'s profile management flow, head over to: https://www.ory.sh/docs/kratos/selfservice/profile
         * @summary Initialize Profile Management Flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initializeProfileManagementFlow(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initializeProfileManagementFlow(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicApi.initializeProfileManagementFlow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint initializes a registration flow. This endpoint **should not be called from a programatic API** but instead for the, for example, browser. It will redirect the user agent (e.g. browser) to the configured registration UI, appending the registration challenge.  For an in-depth look at ORY Krato\'s registration flow, head over to: https://www.ory.sh/docs/kratos/selfservice/registration
         * @summary Initialize a Registration Flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initializeRegistrationFlow(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initializeRegistrationFlow(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicApi.initializeRegistrationFlow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicApiFp(configuration)
    return {
        /**
         * This endpoint returns a login request\'s context with, for example, error details and other information.  For an in-depth look at ORY Krato\'s profile management flow, head over to: https://www.ory.sh/docs/kratos/selfservice/profile
         * @summary Complete Profile Management Flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeProfileManagementFlow(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.completeProfileManagementFlow(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a login request\'s context with, for example, error details and other information.  For an in-depth look at ORY Krato\'s login flow, head over to: https://www.ory.sh/docs/kratos/selfservice/login
         * @summary Get Login Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginRequest(options?: RawAxiosRequestConfig): AxiosPromise<LoginRequest> {
            return localVarFp.getLoginRequest(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a profile management request\'s context with, for example, error details and other information.  It can be used from a Single Page Application or other applications running on a client device. The request must be made with valid authentication cookies or it will fail!  If you wish to access this endpoint without the valid cookies (e.g. as part of a server) please call this path at the admin port.  For an in-depth look at ORY Krato\'s profile management flow, head over to: https://www.ory.sh/docs/kratos/selfservice/profile
         * @summary Get Profile Management Request (via cookie)
         * @param {PublicApiGetProfileManagementRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileManagementRequest(requestParameters: PublicApiGetProfileManagementRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileManagementRequest> {
            return localVarFp.getProfileManagementRequest(requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a registration request\'s context with, for example, error details and other information.  For an in-depth look at ORY Krato\'s registration flow, head over to: https://www.ory.sh/docs/kratos/selfservice/registration
         * @summary Get Registration Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistrationRequest(options?: RawAxiosRequestConfig): AxiosPromise<RegistrationRequest> {
            return localVarFp.getRegistrationRequest(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initializes a login flow. This endpoint **should not be called from a programatic API** but instead for the, for example, browser. It will redirect the user agent (e.g. browser) to the configured login UI, appending the login challenge.  If the user-agent already has a valid authentication session, the server will respond with a 302 code redirecting to the config value of `urls.default_return_to`.  For an in-depth look at ORY Krato\'s login flow, head over to: https://www.ory.sh/docs/kratos/selfservice/login
         * @summary Initialize a Login Flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeLoginFlow(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.initializeLoginFlow(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initializes a profile update flow. This endpoint **should not be called from a programatic API** but instead for the, for example, browser. It will redirect the user agent (e.g. browser) to the configured login UI, appending the login challenge.  If the user-agent does not have a valid authentication session, a 302 code will be returned which redirects to the initializeLoginFlow endpoint, appending this page as the return_to value.  For an in-depth look at ORY Krato\'s profile management flow, head over to: https://www.ory.sh/docs/kratos/selfservice/profile
         * @summary Initialize Profile Management Flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeProfileManagementFlow(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.initializeProfileManagementFlow(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initializes a registration flow. This endpoint **should not be called from a programatic API** but instead for the, for example, browser. It will redirect the user agent (e.g. browser) to the configured registration UI, appending the registration challenge.  For an in-depth look at ORY Krato\'s registration flow, head over to: https://www.ory.sh/docs/kratos/selfservice/registration
         * @summary Initialize a Registration Flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initializeRegistrationFlow(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.initializeRegistrationFlow(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getProfileManagementRequest operation in PublicApi.
 * @export
 * @interface PublicApiGetProfileManagementRequestRequest
 */
export interface PublicApiGetProfileManagementRequestRequest {
    /**
     * Request should be set to the value of the &#x60;request&#x60; query parameter by the profile management UI.
     * @type {string}
     * @memberof PublicApiGetProfileManagementRequest
     */
    readonly request: string
}

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
    /**
     * This endpoint returns a login request\'s context with, for example, error details and other information.  For an in-depth look at ORY Krato\'s profile management flow, head over to: https://www.ory.sh/docs/kratos/selfservice/profile
     * @summary Complete Profile Management Flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public completeProfileManagementFlow(options?: RawAxiosRequestConfig) {
        return PublicApiFp(this.configuration).completeProfileManagementFlow(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a login request\'s context with, for example, error details and other information.  For an in-depth look at ORY Krato\'s login flow, head over to: https://www.ory.sh/docs/kratos/selfservice/login
     * @summary Get Login Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getLoginRequest(options?: RawAxiosRequestConfig) {
        return PublicApiFp(this.configuration).getLoginRequest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a profile management request\'s context with, for example, error details and other information.  It can be used from a Single Page Application or other applications running on a client device. The request must be made with valid authentication cookies or it will fail!  If you wish to access this endpoint without the valid cookies (e.g. as part of a server) please call this path at the admin port.  For an in-depth look at ORY Krato\'s profile management flow, head over to: https://www.ory.sh/docs/kratos/selfservice/profile
     * @summary Get Profile Management Request (via cookie)
     * @param {PublicApiGetProfileManagementRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getProfileManagementRequest(requestParameters: PublicApiGetProfileManagementRequestRequest, options?: RawAxiosRequestConfig) {
        return PublicApiFp(this.configuration).getProfileManagementRequest(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a registration request\'s context with, for example, error details and other information.  For an in-depth look at ORY Krato\'s registration flow, head over to: https://www.ory.sh/docs/kratos/selfservice/registration
     * @summary Get Registration Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getRegistrationRequest(options?: RawAxiosRequestConfig) {
        return PublicApiFp(this.configuration).getRegistrationRequest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initializes a login flow. This endpoint **should not be called from a programatic API** but instead for the, for example, browser. It will redirect the user agent (e.g. browser) to the configured login UI, appending the login challenge.  If the user-agent already has a valid authentication session, the server will respond with a 302 code redirecting to the config value of `urls.default_return_to`.  For an in-depth look at ORY Krato\'s login flow, head over to: https://www.ory.sh/docs/kratos/selfservice/login
     * @summary Initialize a Login Flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public initializeLoginFlow(options?: RawAxiosRequestConfig) {
        return PublicApiFp(this.configuration).initializeLoginFlow(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initializes a profile update flow. This endpoint **should not be called from a programatic API** but instead for the, for example, browser. It will redirect the user agent (e.g. browser) to the configured login UI, appending the login challenge.  If the user-agent does not have a valid authentication session, a 302 code will be returned which redirects to the initializeLoginFlow endpoint, appending this page as the return_to value.  For an in-depth look at ORY Krato\'s profile management flow, head over to: https://www.ory.sh/docs/kratos/selfservice/profile
     * @summary Initialize Profile Management Flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public initializeProfileManagementFlow(options?: RawAxiosRequestConfig) {
        return PublicApiFp(this.configuration).initializeProfileManagementFlow(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initializes a registration flow. This endpoint **should not be called from a programatic API** but instead for the, for example, browser. It will redirect the user agent (e.g. browser) to the configured registration UI, appending the registration challenge.  For an in-depth look at ORY Krato\'s registration flow, head over to: https://www.ory.sh/docs/kratos/selfservice/registration
     * @summary Initialize a Registration Flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public initializeRegistrationFlow(options?: RawAxiosRequestConfig) {
        return PublicApiFp(this.configuration).initializeRegistrationFlow(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VersionApi - axios parameter creator
 * @export
 */
export const VersionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns the service version typically notated using semantic versioning.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Get service version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VersionApi - functional programming interface
 * @export
 */
export const VersionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VersionApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns the service version typically notated using semantic versioning.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Get service version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersion(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Version>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVersion(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VersionApi.getVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VersionApi - factory interface
 * @export
 */
export const VersionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VersionApiFp(configuration)
    return {
        /**
         * This endpoint returns the service version typically notated using semantic versioning.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Get service version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(options?: RawAxiosRequestConfig): AxiosPromise<Version> {
            return localVarFp.getVersion(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export class VersionApi extends BaseAPI {
    /**
     * This endpoint returns the service version typically notated using semantic versioning.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Get service version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public getVersion(options?: RawAxiosRequestConfig) {
        return VersionApiFp(this.configuration).getVersion(options).then((request) => request(this.axios, this.basePath));
    }
}



